# c

snippet todo  "// TODO: " bwA
// TODO: $0
endsnippet

snippet "hello world" "hello world" bA
#include <stdio.h>

int main() {
    ${1:printf("Hello, World!");}
    $0
    return 0;
}
endsnippet

# comment 
# -------------------------------------------
snippet //  "//" bwA
// $0
endsnippet

snippet /*  "/*" bwA
/*
$0
*/
$0
endsnippet

snippet /.  "/*" bwA
/*
$1
*/
$0
endsnippet

# define
# -------------------------------------------
snippet dfn "#define var val" bwA
#define ${1:PI} ${2:3.141592654} 
$0
endsnippet

snippet udfn "#define var val" bwA
#undef ${1:MESSAGE}
$0
endsnippet

snippet indd "if not defined define" bwA
#if !defined (${1:MESSAGE})
    #define $1 ${2:"your wish!"} 
#endif

$0
endsnippet

snippet udd "undefine define" bwA
#undef ${1:MESSAGE}
#define $1 ${2:"your wish!"} 

$0
endsnippet

# Predefined Macros
snippet pdm "predefined macro" bwA
${1:
printf("File :%s\n", __FILE__ );
printf("Date :%s\n", __DATE__ );
printf("Time :%s\n", __TIME__ );
printf("Line :%d\n", __LINE__ );
printf("ANSI :%d\n", __STDC__ );
}
endsnippet

snippet dpass "define pass" bwA
#define PASS printf("pass")
$0
endsnippet

snippet dps "define pass" bwA
PASS;
$0
endsnippet


# key words
# -------------------------------------------
snippet bts "basic types" bwA
${1:/* 
Type                  Storage size    Value range
char                  1 byte          -128 to 127
short                 2 bytes         -32,768 to 32,767
int                   4 bytes         -2,147,483,648 to 2,147,483,647
long                  8 bytes         -9223372036854775808 to 9223372036854775807

signed char           1 byte          -128 to 127
unsigned char         1 byte          0 to 255
unsigned short        2 bytes         0 to 65,535
unsigned int          4 bytes         0 to 4,294,967,295
unsigned long         8 bytes         0 to 18446744073709551615

float                 4 bytes         1.2E-38   to 3.4E+38     6 decimal places
double                8 bytes         2.3E-308  to 1.7E+308   15 decimal places
long double           10 bytes        3.4E-4932 to 1.1E+4932  19 decimal places

void
void *
*/}
endsnippet

snippet keywords "keywords" bwA
${1:/* 
auto          else        long          switch
break         enum        register      typedef
case          extern      return        union
char          float       short         unsigned
const         for         signed        void
continue      goto        sizeof        volatile
default       if          static        while
do            int         struct        _Packed
double
*/}
endsnippet

snippet icl "include" bwA
#include<${1:stdio.h}>
$0
endsnippet

snippet vd "void" bwA
void $1;
$0
endsnippet

snippet em "enum" bwA
enum ${1:week} {${2:Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday}};
$0
endsnippet

snippet vlt "volatile " bwA
volatile ${1:var};
$0
endsnippet

snippet ct "continue" bwA
continue;$0
endsnippet

snippet bk "break" bwA
break;$0
endsnippet

snippet rt "return" bwA
return ${1:${VISUAL:msg}};$0
endsnippet


# variables
# -------------------------------------------
snippet vv "type var;" bwA
${1:type var = value};
$0
endsnippet

snippet cv "char" bwA
char ${1:c};
$0
endsnippet

snippet chv "char" bwA
char ${1:c};
$0
endsnippet

snippet chsv "char" bwA
char ${1:s}[${2:100}];
$0
endsnippet

snippet sv "short" bwA
short ${1:x};
$0
endsnippet

snippet iv "int" bwA
int ${1:i};
$0
endsnippet

snippet lv "long" bwA
long ${1:x};
$0
endsnippet

snippet fv "float" bwA
float ${1:x};
$0
endsnippet

snippet dv "double" bwA
double ${1:x};
$0
endsnippet

snippet ldv "long double" bwA
long double ${1:x};
$0
endsnippet

snippet ucv "unsigned char" bwA
unsigned char ${1:x};
$0
endsnippet

snippet usv "unsigned short" bwA
unsigned short ${1:x};
$0
endsnippet

snippet uiv "unsigned int" bwA
unsigned int ${1:x};
$0
endsnippet

snippet ulv "unsigned long" bwA
unsigned long ${1:x};
$0
endsnippet

# constant
snippet cc "const" bwA
const ${1:double} ${2:PI} = ${3:3.141592654};
$0
endsnippet

snippet cnsti "const int" bwA
const int ${1:var} = ${2:val};
$0
endsnippet

snippet cnstf "const float" bwA
const float ${1:var} = ${2:val};
$0
endsnippet

snippet cnstd "const double" bwA
const double ${1:var} = ${2:val};
$0
endsnippet

snippet cnstld "const long double" bwA
const long double ${1:var} = ${2:val};
$0
endsnippet


# storage class: auto, register, static, extern, 
# -------------------------------------------
snippet scau "auto" bwA
auto ${1:type var};
$0
endsnippet

snippet scex "extern" bwA
extern ${1:type var};
$0
endsnippet

snippet scre "register" bwA
register ${1:type var};
$0
endsnippet

snippet scst "static" bwA
static ${1:type var};
$0
endsnippet


# operators 
# -------------------------------------------
snippet "op pri" "operators priority" bwA
${1:/* 
<-       () [] -> .
->       ! - ++ -- + - * & (type) sizeof
<-       * / %
<-       + -
<-       << >>
<-       < <= > >=
<-       == !=
<-       &
<-       ^
<-       |
<-       &&
<-       ||
->       ?:
->       = += -= *= /= %= &=
->       ^= |= <<= >>=
<-       ,
*/}
$0
endsnippet

# > >= < <= == !=
snippet gt/ ">" wA
> $0
endsnippet

snippet ge/ ">=" wA
>= $0
endsnippet

snippet lt/ "<" wA
< $0
endsnippet

snippet le/ "<=" wA
<= $0
endsnippet

snippet eq/ "==" wA
== $0
endsnippet

snippet ne/ "!=" wA
!= $0
endsnippet

# and or
snippet and/ "&&" wA
&&$0
endsnippet

snippet or/ "||" wA
||$0
endsnippet

snippet band "&" wA
&$0
endsnippet

snippet bor "|" wA
|$0
endsnippet

snippet bnot "!" wA
!$0
endsnippet

snippet bcmp "~" wA
~$0
endsnippet

snippet brs "bit right shift >>" wA
>>$0
endsnippet

snippet bls "bit left shift <<" wA
<<$0
endsnippet

snippet "pp|pluss" "+" irA
 + $0
endsnippet

snippet "mm|minuss" "mm" irA
 - $0
endsnippet

snippet dpl "+" wA
++$0
endsnippet

snippet dmi "--" wA
--$0
endsnippet

snippet "xx|mutiplyy" "xx" irA
*$0
endsnippet

snippet "ddd" "/" irA
/$0
endsnippet

snippet "rrr" "%" irA
%$0
endsnippet

snippet "hh|hatt" "^" irA
^$0
endsnippet

snippet "uu" "_" irA
_$0
endsnippet

# ?: or ?? to expand, note: the first printf have no ;
snippet "\?:|\?\?" "condition ? case true: case false;" irA
${1:condition} ? ${2:printf("true")} : ${3:printf("false")};
$0
endsnippet

snippet szf "sizeof" wA
sizeof(${1:var})$0
endsnippet

snippet -. "->" wA
->$0
endsnippet

# control flow
# -------------------------------------------
snippet ie "visual if else" bwA
if (${1:true}) {
    ${2:printf("if")};
} else {
    ${3:printf("else")};
}

$0
endsnippet

snippet if "visual if" bwA
if (${1:true}) {
    ${1:${VISUAL:printf("if")}};
}

$0
endsnippet

snippet ii "if else if" bwA
if (${1:true}) {
    ${3:printf("if")};
} else if (${2:true}) {
    ${4:printf("else if")};
} $0
endsnippet

snippet "} el" "visual else" rA
} else {
    ${1:printf("else")};
}

$0
endsnippet

snippet "} ei" "visual elif" rA
} else if (${1:True}) {
    ${1:printf("else if")};
} $0
endsnippet

snippet iok "if !ok { ... }" bwA
if (!ok) {
    ${1:${VISUAL:printf("pass")}};
}

$0
endsnippet

snippet swi "switch" wA
switch (${1:val}) {
    case ${2:val1}:
        ${3:printf("case 1")};
        break;
    case ${4:val2}:
        ${5:printf("case 2")};
        break;
    default:
        ${6:printf("default")};
        break;
};

$0
endsnippet

snippet cs "case" bwA
case ${1:val}:
    $2;
    break;
$0
endsnippet

snippet dft "default" bwA
default:
    $1;
    break;
$0
endsnippet

snippet for "for ... { ... }" bwA
for (${1:i=1}; ${2:i<n}; ${3:i++}) {
    ${4:${VISUAL:printf("pass")}};
}

$0
endsnippet

snippet ofor "one line for" bwA
for (${1:i=1}; ${2:i<=10}; ${3:i++}) { ${4:printf("pass")}; };$0
endsnippet

snippet ff "for for" bwA
for (${1:i=1; i<=10; i++}) {
    for (${2:j=1; j<=10; j++}) {
        ${3:printf("pass")};
    }
    ${4:printf("pass")};
}

$0
endsnippet

snippet lfor "chain list for" bwA
for (${1:ptr=root}; ${2:ptr!=NULL}; ${3:ptr=ptr.next}) {
    ${4:printf("pass")};
}

$0
endsnippet

snippet wl "while for" bwA
while (${1:i<=10}) {
    ${3:printf("pass")};
    $4

    ${2:i++}
}

$0
endsnippet

snippet dow "do while" bwA
do {
    ${3:printf("pass")};
    $4

    ${2:i++}
} while (${1:i<=10});

$0
endsnippet

snippet lb "label" bwA
${1:LABEL}: ${2:printf("pass")};
$0
endsnippet

snippet goto "goto" bwA
goto ${1:LABEL};$0
endsnippet

# function
# -------------------------------------------
snippet dfc "declare function" bwA
${1:return_type} ${2:func}(${3:type1 var1, type2 var2});
endsnippet

snippet main "func main() { ... }" bwA
int main() {
    $0;

    return 0;
}
endsnippet

snippet fc "function" bwA
${1:return_type} ${2:func}(${3:type1 var1[], type2 var2[size], type3 *var3, type4 var4}) {
    $1 ${4:res};
    ${5:printf("pass")};
    
    return $4;
}

$0
endsnippet

# arguments be passed by reference
snippet byr "arg be passed by reference" bwA
${1:return_type} ${2:func}(${3:type1 *var1, type2 *var2}) {
    $1 ${4:res};
    ${5:printf("pass")};
    
    return $4;
}

$0
endsnippet

snippet byv "arg be passed by value" bwA
${1:return_type} ${2:func}(${3:type1 var1, type2 var2}) {
    $1 ${4:res};
    ${5:printf("pass")};
    
    return $4;
}

$0
endsnippet

snippet retar "res an array" bwA
${1:return_type} * ${2:func}(${3:type1 var1, type2 *var2}) {
    static $1 ${4:arr}[${5:size}];
    ${5:printf("pass")};
    
    return $4;
}

$0
endsnippet


snippet vararg "var arg" bwA
#include <stdio.h>
#include <stdarg.h>

${1:int} ${2:func}(int num, ...) {
    va_list valist;
    int i;

    /* initialize valist for num number of arguments */
    va_start(valist, num);

    /* access all the arguments assigned to valist */
    for (i = 0; i < num; i++) {
        // sum += va_arg(valist, int);
        ${3:printf("pass")};
    }

    /* clean memory reserved for valist */
    va_end(valist);

    return 0;
}

$0
endsnippet

snippet exvararg "var arg example" bwA
#include <stdio.h>
#include <stdarg.h>

${1:double} ${2:func}(int num, ...) {
    va_list valist;
    int i;

    double sum = 0.0;

    /* initialize valist for num number of arguments */
    va_start(valist, num);

    /* access all the arguments assigned to valist */
    for (i = 0; i < num; i++) {
        sum += va_arg(valist, int);
        ${3:printf("pass")};
    }

    /* clean memory reserved for valist */
    va_end(valist);

    return sum/num;
}

int main() {
    printf("Average of 2, 3, 4, 5 = %f\n", $2(4, 2,3,4,5));
    printf("Average of 5, 10, 15 = %f\n", $2(3, 5,10,15));
}
endsnippet

# array
# -------------------------------------------
snippet 1ar "type arr [size]" bwA
${1:type} ${2:arr} [${3:size}];
$0
endsnippet

snippet 2ar "type arr [m][n]" bwA
${1:type} ${2:arr} [${3:m}][${4:n}];
$0
endsnippet

snippet 3ar "type arr [m][n][o]" bwA
${1:type} ${2:arr} [${3:m}][${4:n}][${5:o}];
$0
endsnippet

snippet 4ar "type arr [m][n][o][p]" bwA
${1:type} ${2:arr} [${3:m}][${4:n}][${5:o}][${6:p}];
$0
endsnippet

snippet a1ar "asign type arr [] = {val1, val2, val3, val4}" bwA
${1:type} ${2:arr} [] = {${3:val1, val2, val3, val4}};
$0
endsnippet

snippet a2ar "asign type arr [m][n] = {{}, {}}" bwA
${1:type} ${2:arr} [${3:m}][${4:n}] = {${5:{}, {}, {}}};
$0
endsnippet

# pointer 
# -------------------------------------------
snippet ptr "point" bwA
${1:type} *${2:ptr}${3: = NULL};
$0
endsnippet

snippet 1ptr "point" bwA
${1:type} *${2:ptr}${3: = NULL};
$0
endsnippet

snippet 2ptr "point" bwA
${1:type} **${2:ptr}${3: = NULL};
$0
endsnippet

snippet 3ptr "point" bwA
${1:type} ***${2:ptr} ${3:= NULL};
$0
endsnippet

snippet isnull "if point" bwA
if (!ptr) {
    ${1:printf("null pointer")};
}

$0
endsnippet

# c-string 
# -------------------------------------------
snippet strc "string in c style" bwA
char ${2:str}[${2:n}]${3: = "${4:string}"};
$0
endsnippet

snippet strf "string functions" bwA
${1:strchr(str1, ch)
strstr(str1, str2)
strlen(str1, str2)
strcat(str1, str2)
strcpy(str1, str2)
strcmp(str1, str2)
...
}$0
endsnippet

# struct 
# -------------------------------------------
snippet stru "struct var" bwA
struct ${1:Novel} struct {${2:
    ${3:char title[50]};
    ${4:char author[50]};
    ${5:char subject[100]};
    ${6:int id};
}};

$0
endsnippet

# typedef 
# -------------------------------------------
snippet tpd "typedef" bwA
typedef ${1:type} ${2:type_alias};
$0
endsnippet

# input/output 
# -------------------------------------------
snippet getc "getchar" bwA
int c;
c = getchar();
$0
endsnippet

snippet putc "putchar" bwA
int c;
putchar(c);
$0
endsnippet

snippet gets "gets" bwA
char str[100];
gets(str);

$0
endsnippet

snippet puts "puts" bwA
char str[100];
puts(str);
$0
endsnippet

snippet sf "scrant" bwA
scanf("${1:%d %s}", ${2:&i, str});
$0
endsnippet

snippet "pf" "printf" brA
printf("${1:%d %s}", ${2:&i, str});
$0
endsnippet

snippet pass "printf" bwA
printf("${1:pass}");
$0
endsnippet

# type casting 
# -------------------------------------------
snippet 2c "to char" wA
(char) $0
endsnippet

snippet 2s "to short" wA
(short) $0
endsnippet

snippet 2i "to int" wA
(int) $0
endsnippet

snippet 2li "to long" wA
(long) $0
endsnippet

snippet 2uc "to unsigned char" wA
(unsigned char) $0
endsnippet

snippet 2us "to unsigned short" wA
(unsigned short) $0
endsnippet

snippet 2ui "to unsigned int" wA
(unsigned int) $0
endsnippet

snippet 2ul "to unsigned long" wA;
(unsigned long) $0
endsnippet

snippet 2f "to float" wA
(float) $0
endsnippet

snippet 2d "to double" wA
(double) $0
endsnippet

snippet 2ld "to long double" wA
(long double) $0
endsnippet









